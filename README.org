* My Telegram Bot

  A repository containing the bots developed in Scala.

** Bots

     | Telegram Bot                     | Character Link                   |
     | https://t.me/RichardPHJBensonBot | [[https://en.wikipedia.org/wiki/Richard_Benson_(musician)][Richard Philip Henry John Benson]] |
     | https://t.me/YouTuboAncheI0Bot   | [[https://www.youtube.com/channel/UCO66DuFYNFMdR8Y31Ire1fg][Youtubo Anche Io]]                 |
     | https://t.me/ABarberoBot         | [[https://en.wikipedia.org/wiki/Alessandro_Barbero][Alessandro Barbero]]               |
     | https://t.me/XahLeeBot           | [[http://xahlee.info/][Xah Lee]]                          |
     | https://t.me/CalandroBot         |                                  |

** Required Software
    - [[https://git-scm.com/][git]]
    - [[https://www.scala-sbt.org/][sbt - Scala Build Tool]]
    - [[https://www.scala-lang.org/][scala]]

** Add Data to the Bots

     Earch bot contains a ~resources~ folder. You need to put there
     the ~.token~ file contanining the telegram key specific to each
     bot.

     Each  bot also uses a sqlite Database! So you need
     to provide the path to the database into the ~application.conf~
     or just setup the specific environment variables. No need to put
     the files in resources since those will be fetched from the web
     via urls.

     Read the following section to know how to setup the database

     Check [[https://youtu.be/T-AfAvJLSJE][this video]] for a complete rundown on how to add files to a bot.

** Database Setup

     There's a module called ~botDB~, if opportunately configured,
     when launched it applies the migrations and the populate a bot
     database. Just setup the ~application.conf~ correctly with the DB
     path, see the db in the root of the project, and the location of
     the ~csv~. There should be a ~csv~ file in the root of each bot
     module

** Compile and Test

     Just run the following commands in a shell to check if everything
     is fine.

#+begin_src bash
  sbt compile
  sbt Test/compile
  sbt IntegrationTest/compile
  sbt fix
  sbt test
  sbt IntegrationTest/test
#+end_src

** Run the Bots
*** Long Polling
     Under windows use the git bash terminal.

   #+begin_src bash
     ./lunch.sh # I know it's lunch not launch :)
   #+end_src

*** Webhook
**** Localhost

     - Export the webhook host, locally using [[https://ngrok.com/][ngrok]], [[https://github.com/beyondcode/expose][expose]] or [[https://github.com/agrinman/tunnelto][tunnelTo]]. example: ~./expose share http://localhost:8080~
     - Change the entry ~WEBHOOK_HOST_URL~ with the name of the host from previous step or change it in ~~myTelegramBot/main/src/main/resources/application.conf~
     - run ~sbt assembly~
     - run ~java -cp main/target/scala-2.13/main.jar com.benkio.main.MainWebhook~

**** Docker

      TODO: There's already a ~main/Dockerfile~ with the command to run the webhook, but still it needs to be tested and visible from outside
            Also check [[https://expose.dev/docs/getting-started/installation#as-a-docker-container][expose on docker]]. In order to may make it discoverable from telegram api.

** Deploy on Oracle Cloud Infrastructure VM
*** Setup

 - Create a vm instance in Oracle cloud
 - Get the SSH Private and Public Keys to access it
 - Login to ssh vm instace by ssh private key, user and ip. get the last two in the site. Eg command: ~ssh -i <<private key of the vm>> <<user of the vm>>@<<public ip of the vm>>~ (~ssh -i ssh-key-2022-04-26.key opc@140.238.155.16~)
 - Install the jdk 16. Follow this [[https://blogs.oracle.com/developers/post/how-to-install-oracle-java-in-oracle-cloud-infrastructure][tutorial]]
*** Deploy

 - Set the ~main/src/resources/application.conf~ accondigly (eg. right db path, urls...)
 - Run ~sbt "clean; main/assembly"~ to create the fat jar
 - Move the fat jar to the vm by ~rsync~ and ~ssh~. Eg. ~rsync -P -e "ssh -i <<private key of the vm>>" <<path to the fat jar -> myTelegramBot/main/target/scala-2.13/main.jar>> <<user of the vm>>@<<public ip of the vm>>:/home/<<user of the vm>>/main.jar~ (~rsync -P -e "ssh -i ssh-key-2022-04-26.key" /home/benkio/workspace/mytelegrambot/main/target/scala-2.13/main.jar opc@140.238.155.16:/home/opc/main.jar~)
 - Move the ~botDB.sqlite~ if not present in the same way before. If an update to the ~media~ needs to be done, better to dump the current database in order not to lose the ~timeout~ or other changes
 - Login to the vm
 - Be sure to have the right environment variables. IT'S RECOMMENDED TO
   CHANGE the ~application.conf~ (point 1) before running the ~assembly~. The environment variables could lose their value somehow.
 - Run the bots. Easier by polling: ~java -Xmx1024m -cp main.jar com.benkio.main.MainPolling~
 - press ~Ctrl+Z~, run ~bg~ and ~disown~ in order to let previous command run in background
 - close your terminal and enjoy
