* My Telegram Bot

  A repository containing the bots developed in Scala.

** Installation

   Details regarding the installation and run of the bots

*** Prerequisites

    Download the Data. Ask benkio: [[https://benkio.github.io][benkio.github.io]]

**** Software
    - [[https://git-scm.com/][git]]
    - [[https://www.scala-sbt.org/][sbt - Scala Build Tool]]
    - [[https://www.scala-lang.org/][scala]]

*** Installation

**** Clone the Repository

#+begin_src bash
  git clone git@github.com:benkio/myTelegramBot.git
#+end_src

**** Move the Data into Resources Directory

     Earch bot contains a ~resources~ folder. You need to
     uncompress/move the data and put the files in each of the bot's
     resource folders. Put particular attention to the ~.token~ file
     contanining the telegram key specific to each bot.

     For the Richard Benson's bot it uses sqlite Database! So you need
     to provide the path to the database into the ~application.conf~
     or just setup the specific environment variables. No need to put
     the files in resources since those will be fetched from the web
     via urls

     Read the following section to know how to setup the database

***** Database Setup

     There's a module called ~botDB~, if opportunately configured,
     when launched it applies the migrations and the populate a bot
     database (Richard's one for now). Just setup the
     ~application.conf~ correctly with the DB path, see the db in the
     root of the project, and the location of the csv (tipically the
     resources of the previous section)

**** Compile and Test

     Just run the following commands in a shell, at the bot folder
     level, to check if everything is fine.

#+begin_src bash
  sbt compile
  sbt test:compile
  sbt fix
  sbt test
  sbt IntegrationTest/test
#+end_src

*** Run the Bots

**** Long Polling
       Under windows use the git bash terminal.

   #+begin_src bash
     ./lunch.sh # I know it's lunch not launch :)
   #+end_src

**** Webhook

***** Localhost

     - Export the webhook host, locally using [[https://ngrok.com/][ngrok]], [[https://github.com/beyondcode/expose][expose]] or [[https://github.com/agrinman/tunnelto][tunnelTo]]. example: ~./expose share http://localhost:8080~
     - Change the entry ~WEBHOOK_HOST_URL~ with the name of the host from previous step or change it in ~~myTelegramBot/main/src/main/resources/application.conf~
     - run ~sbt assembly~
     - run ~java -cp main/target/scala-2.13/main.jar com.benkio.main.MainWebhook~

***** Docker

      TODO: There's already a ~main/Dockerfile~ with the command to run the webhook, but still it needs to be tested and visible from outside
            Also check [[https://expose.dev/docs/getting-started/installation#as-a-docker-container][expose on docker]]. In order to may make it discoverable from telegram api.

*** Deploy on Oracle Cloud Infrastructure VM

**** Setup

 - Create a vm instance in Oracle cloud
 - Get the SSH Private and Public Keys to access it
 - Login to ssh vm instace by ssh private key, user and ip. get the last two in the site. Eg command: ~ssh -i <<private key of the vm>> <<user of the vm>>@<<public ip of the vm>>~ (~ssh -i ssh-key-2022-04-26.key opc@140.238.155.16~)
 - Install the jdk 16. Follow this [[https://blogs.oracle.com/developers/post/how-to-install-oracle-java-in-oracle-cloud-infrastructure][tutorial]]
**** Deploy

 - Set the ~main/src/resources/application.conf~ accondigly (eg. right db path, urls...)
 - Run ~sbt "clean; main/assembly"~ to create the fat jar
 - Move the fat jar to the vm by ~rsync~ and ~ssh~. Eg. ~rsync -P -e "ssh -i <<private key of the vm>>" <<path to the fat jar -> myTelegramBot/main/target/scala-2.13/main.jar>> <<user of the vm>>@<<public ip of the vm>>:/home/<<user of the vm>>/main.jar~ (~rsync -P -e "ssh -i ssh-key-2022-04-26.key" /home/benkio/workspace/mytelegrambot/main/target/scala-2.13/main.jar opc@140.238.155.16:/home/opc/main.jar~)
 - Move the ~botDB.sqlite~ if not present in the same way before. If an update to the ~media~ needs to be done, better to dump the current database in order not to lose the ~timeout~ or other changes
 - Login to the vm
 - Be sure to have the right environment variables. IT'S RECOMMENDED TO
   CHANGE the ~application.conf~ (point 1) before running the ~assembly~. The environment variables could lose their value somehow.
 - Run the bots. Easier by polling: ~java -Xmx1024m -cp main.jar com.benkio.main.MainPolling~
 - press ~Ctrl+Z~, run ~bg~ and ~disown~ in order to let previous command run in background
 - close your terminal and enjoy

*** Next Development Ideas
**** General(Maybe) Development
    - [X] TextReply needs to allow side effects with Message => F[List[String]]. This enable to access resources depending on message text
    - [ ] Heroku Postgres terminates on November 28, 2022. Check the [[https://github.com/benkio/myTelegramBot/issues/102][issue]]
    - [ ] Twitch support
    - [ ] Discord support
    - [ ] Slack support
    - [ ] Telegram Webhook (tested locally, not deployed)
    - [X] Anti-spam filter (https://github.com/benkio/myTelegramBot/issues/45)
    - [X] Timeout the bot for a specific chat
    - [X] Disable ~/triggerlist~ for groups. maybe with an alternative message telling that when happens
    - [X] Option to disable the bot on forwarded messages (default true)
    - [ ] Refactor logging
    - [ ] Feedback button on bot messages
    - [ ] Create ~youtuboAncheIoBot~ on the same template as barbero bot
**** Richard Philip Henry John Benson Bot
    - [X] Add all the videos from https://t.me/ilsimposioinfernale
    - [X] Add a command for Random Benson's show youtube link: eg. from the channel Brigate Benson
    - [X] Add a command for a Benson's show by keyword in the title
    - [X] Add a auto reply on the group join sending: /Chi Ã¨ questa persona scusate, eh?/
    - [ ] Add a schedule that shares a random youtube show every friday at 22 CET
    - [ ] Refactor the `/triggerlist` command:
      - Programmatically generate a txt file with the current triggers pretty printed
      - Add a test to ensure it's consistent and up to date with the code
      - Change the command to return a link to github pointing to such file
    - [X] Add a command to check for a specific match, returning the selected response
    - [ ] Collect statistics on the triggers (on db: specific table) + Add command to see the top 20 matches
**** Xah Bot
    - [X] Add a command for a random xah's talk show youtube link
    - [X] Add a command for a xah's talk show by keyword in the title
    - [ ] Move all the data to the database and use it as richard
**** Barbero Bot
    - [X] Add a command for a random barbero's talk show youtube link
    - [X] Add a command for a barbero's talk show by keyword in the title
    - [ ] Refactor the `/triggerlist` command:
      - Programmatically generate a txt file with the current triggers pretty printed
      - Add a test to ensure it's consistent and up to date with the code
      - Change the command to return a link to github pointing to such file
    - [X] Add a command to check for a specific match, returning the selected response
    - [ ] Move all the data to the database and use it as richard
**** CalandroBot
    - [ ] Move all the data to the database and use it as richard
